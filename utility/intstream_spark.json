{"paragraphs":[{"text":"%pyspark\nsc","user":"anonymous","dateUpdated":"2020-02-03T00:49:01+0000","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"<SparkContext master=yarn appName=Zeppelin>\n"}]},"apps":[],"jobName":"paragraph_1580690823143_2023627072","id":"20200127-011225_1121116829","dateCreated":"2020-02-03T00:47:03+0000","dateStarted":"2020-02-03T00:49:01+0000","dateFinished":"2020-02-03T00:49:01+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4034"},{"text":"%pyspark\nrdd = spark.sparkContext.wholeTextFiles(\"s3://intstream-train-upload/intstream-2.20200130.195844.506516/data/\")","user":"anonymous","dateUpdated":"2020-02-03T02:36:04+0000","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1580690823147_-1814876295","id":"20200127-011359_750823026","dateCreated":"2020-02-03T00:47:03+0000","dateStarted":"2020-02-03T02:36:04+0000","dateFinished":"2020-02-03T02:36:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4035"},{"text":"%pyspark\ndfWithSchema = spark.createDataFrame(rdd).toDF(\"file\", \"text\")","user":"anonymous","dateUpdated":"2020-02-03T02:36:09+0000","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1580690823147_55533849","id":"20200127-012917_1708905323","dateCreated":"2020-02-03T00:47:03+0000","dateStarted":"2020-02-03T02:36:09+0000","dateFinished":"2020-02-03T02:36:16+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4036"},{"text":"%pyspark\ntargets = spark.read.json(\"s3://intstream-train-upload/intstream-2.20200130.195844.506516/targets.json\") \ntargets.printSchema()","user":"anonymous","dateUpdated":"2020-02-03T00:49:07+0000","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- article: long (nullable = true)\n |-- id: long (nullable = true)\n |-- mlmodel: long (nullable = true)\n |-- organization: long (nullable = true)\n |-- target: boolean (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1580690823148_-1863488159","id":"20200127-014511_756734531","dateCreated":"2020-02-03T00:47:03+0000","dateStarted":"2020-02-03T00:49:07+0000","dateFinished":"2020-02-03T00:49:10+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4037"},{"text":"%pyspark\ntargets = targets.drop(\"id\")","user":"anonymous","dateUpdated":"2020-02-03T00:49:11+0000","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1580690823148_2026147128","id":"20200129-030137_1599740478","dateCreated":"2020-02-03T00:47:03+0000","dateStarted":"2020-02-03T00:49:11+0000","dateFinished":"2020-02-03T00:49:11+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4038"},{"text":"%pyspark\nfrom pyspark.sql.functions import substring_index, col\nres = dfWithSchema.select(col(\"*\"), substring_index(col(\"file\"), \"/\", -1).alias(\"id\"))","user":"anonymous","dateUpdated":"2020-02-03T00:49:11+0000","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1580690823148_-1774343308","id":"20200129-030909_959860390","dateCreated":"2020-02-03T00:47:03+0000","dateStarted":"2020-02-03T00:49:11+0000","dateFinished":"2020-02-03T00:49:11+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4039"},{"text":"%pyspark\njoined = res.join(targets, res.id==targets.article,\"inner\")","user":"anonymous","dateUpdated":"2020-02-03T00:49:11+0000","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1580690823148_-1962210163","id":"20200129-032952_557201113","dateCreated":"2020-02-03T00:47:03+0000","dateStarted":"2020-02-03T00:49:11+0000","dateFinished":"2020-02-03T00:49:11+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4040"},{"text":"%pyspark\nfrom pyspark.sql.types import IntegerType\njoined.select(\"target\")\njoined = joined.withColumn(\"target_int\", joined[\"target\"].cast(IntegerType()))","user":"anonymous","dateUpdated":"2020-02-03T00:49:11+0000","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1580690823149_-1492659186","id":"20200131-013942_38055323","dateCreated":"2020-02-03T00:47:03+0000","dateStarted":"2020-02-03T00:49:11+0000","dateFinished":"2020-02-03T00:49:11+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4041"},{"text":"%pyspark\njoined.printSchema()","user":"anonymous","dateUpdated":"2020-02-03T00:49:11+0000","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- file: string (nullable = true)\n |-- text: string (nullable = true)\n |-- id: string (nullable = true)\n |-- article: long (nullable = true)\n |-- mlmodel: long (nullable = true)\n |-- organization: long (nullable = true)\n |-- target: boolean (nullable = true)\n |-- target_int: integer (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1580690823149_1812852935","id":"20200131-020809_1119339170","dateCreated":"2020-02-03T00:47:03+0000","dateStarted":"2020-02-03T00:49:11+0000","dateFinished":"2020-02-03T00:49:11+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4042"},{"text":"%pyspark\nfeatures = joined.select(\"text\")","user":"anonymous","dateUpdated":"2020-02-03T00:49:11+0000","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1580690823149_-37255360","id":"20200131-024040_677095067","dateCreated":"2020-02-03T00:47:03+0000","dateStarted":"2020-02-03T00:49:11+0000","dateFinished":"2020-02-03T00:49:11+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4043"},{"text":"%pyspark\ntargets = joined.select(\"target\")\n#(training,testing) = joined.randomSplit([0.7,0.3])\n#training.columns","user":"anonymous","dateUpdated":"2020-02-03T00:49:11+0000","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1580690823150_58979461","id":"20200131-024724_1082382186","dateCreated":"2020-02-03T00:47:03+0000","dateStarted":"2020-02-03T00:49:11+0000","dateFinished":"2020-02-03T00:49:11+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4044"},{"text":"%pyspark\nfrom pyspark import keyword_only  ## < 2.0 -> pyspark.ml.util.keyword_only\nfrom pyspark.ml import Transformer\nfrom pyspark.ml.param.shared import HasInputCol, HasOutputCol, Param, Params, TypeConverters\n# Available in PySpark >= 2.3.0 \nfrom pyspark.ml.util import DefaultParamsReadable, DefaultParamsWritable  \nfrom pyspark.sql.functions import udf\nfrom pyspark.sql.types import ArrayType, StringType\nfrom selectolax.parser import HTMLParser\nclass CleanHtml(\n        Transformer, HasInputCol, HasOutputCol,\n        # Credits https://stackoverflow.com/a/52467470\n        # by https://stackoverflow.com/users/234944/benjamin-manns\n        DefaultParamsReadable, DefaultParamsWritable):\n        #https://www.google.com/search?q=spark+udf+transformer&oq=spark+udf+transformer&aqs=chrome..69i57.4514j1j7&sourceid=chrome&ie=UTF-8\n    #stopwords = Param(Params._dummy(), \"stopwords\", \"stopwords\",\n    #                 typeConverter=TypeConverters.toListString)\n\n\n    @keyword_only\n    def __init__(self, inputCol=None, outputCol=None):\n        super(CleanHtml, self).__init__()\n        kwargs = self._input_kwargs\n        self.setParams(**kwargs)\n\n    @keyword_only\n    def setParams(self, inputCol=None, outputCol=None):\n        kwargs = self._input_kwargs\n        return self._set(**kwargs)\n\n\n    # Required in Spark >= 3.0\n    def setInputCol(self, value):\n        \"\"\"\n        Sets the value of :py:attr:`inputCol`.\n        \"\"\"\n        return self._set(inputCol=value)\n\n    # Required in Spark >= 3.0\n    def setOutputCol(self, value):\n        \"\"\"\n        Sets the value of :py:attr:`outputCol`.\n        \"\"\"\n        return self._set(outputCol=value)\n\n    def _transform(self, dataset):\n        #todo(aj) hashes function\n        def clean_hashes(raw):\n            clean_nonwords = re.compile(r'\\S*[^a-zA-Z\\s\\-\\\"\\']\\S*')\n            cleantext = re.sub(clean_nonwords,'',raw)\n            return cleantext\n            \n        def f(raw):\n            \n            tree = HTMLParser(raw)\n\n            if tree.body is None:\n                return raw\n\n            for tag in tree.css('script'):\n                tag.decompose()\n            for tag in tree.css('style'):\n                tag.decompose()\n\n            text = tree.body.text(separator='\\n')\n            text = re.sub(r'\\n\\s*', \"\\n\",text)\n            text = clean_hashes(text)\n            print(\"text: \" + text)\n            return text.strip().strip(\"\\n\")\n\n        t = StringType()\n        out_col = self.getOutputCol()\n        in_col = dataset[self.getInputCol()]\n        return dataset.withColumn(out_col, udf(f, t)(in_col))","user":"anonymous","dateUpdated":"2020-02-03T00:49:12+0000","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1580690823150_1608603140","id":"20200201-003517_743922156","dateCreated":"2020-02-03T00:47:03+0000","dateStarted":"2020-02-03T00:49:12+0000","dateFinished":"2020-02-03T00:49:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4045"},{"text":"%pyspark\nimport re\nfrom pyspark.ml.feature import Tokenizer,StopWordsRemover, CountVectorizer,IDF,StringIndexer\nfrom pyspark.ml.tuning import CrossValidator, ParamGridBuilder\n\n#apply extract body remove html\n#https://stackoverflow.com/questions/32331848/create-a-custom-transformer-in-pyspark-ml\nfrom pyspark.ml.classification import LogisticRegression\n\ncleanhtml = CleanHtml(inputCol=\"text\", outputCol=\"clean_text\")\ntokenizer = Tokenizer(inputCol=\"clean_text\", outputCol=\"token_text\")\nstopremove = StopWordsRemover(inputCol='token_text',outputCol='stop_tokens')\ncount_vec = CountVectorizer(inputCol='stop_tokens',outputCol='c_vec') #TF\nidf = IDF(inputCol=\"c_vec\", outputCol=\"tf_idf\") #IDF Scaler\nlr = LogisticRegression(regParam=0.01,maxIter=20,featuresCol='features', labelCol='target_int')\nfrom pyspark.ml import Pipeline\nfrom pyspark.ml.feature import VectorAssembler\nfrom pyspark.ml.linalg import Vector\nclean_up = VectorAssembler(inputCols=['tf_idf'],outputCol='features')\npipeline = Pipeline(stages=[cleanhtml,tokenizer,stopremove,count_vec,idf,clean_up,lr])\nfrom pyspark.ml.evaluation import BinaryClassificationEvaluator,MulticlassClassificationEvaluator\nparamGrid = ParamGridBuilder()\\\n    .addGrid(lr.regParam, [0.1, 0.001])\\\n    .build()\ncrossval = CrossValidator(estimator=pipeline,\n                          estimatorParamMaps=paramGrid,\n                          evaluator=MulticlassClassificationEvaluator(labelCol=\"target_int\",metricName='f1'),\n                          numFolds=2)\nmdl = crossval.fit(joined)\n#mdl.save(\"s3://intstream-train-upload/intstream-2.20200130.195844.506516/output2.mdl\")\n","user":"anonymous","dateUpdated":"2020-02-03T00:49:57+0000","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1580690823150_646470476","id":"20200131-024734_1086851208","dateCreated":"2020-02-03T00:47:03+0000","dateStarted":"2020-02-03T00:49:57+0000","dateFinished":"2020-02-03T00:50:38+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4046"},{"text":"%pyspark\nmymodel = mdl.bestModel\nmymodel.save(\"s3://intstream-train-upload/intstream-2.20200130.195844.506516/output5.mdl\")","user":"anonymous","dateUpdated":"2020-02-03T00:50:57+0000","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1580690823151_-2035324878","id":"20200201-022025_1243507754","dateCreated":"2020-02-03T00:47:03+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4047","dateFinished":"2020-02-03T00:51:03+0000","dateStarted":"2020-02-03T00:50:58+0000","results":{"code":"SUCCESS","msg":[]}},{"text":"%pyspark\nsorted(mdl.avgMetrics)[-1]","user":"anonymous","dateUpdated":"2020-02-03T00:51:16+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1580690823151_831896036","id":"20200201-023056_76489871","dateCreated":"2020-02-03T00:47:03+0000","dateStarted":"2020-02-03T00:51:16+0000","dateFinished":"2020-02-03T00:51:16+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4048","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"0.4988191632928475\n"}]}},{"text":"%pyspark\nintRdd = sc.parallelize([sorted(mdl.avgMetrics)[-1]])  #for writing int (5)\nstringRdd = sc.parallelize([\"Test String\"]) #for writing string\nintRdd.saveAsTextFile(\"s3://intstream-train-upload/intstream-2.20200130.195844.506516/metric.txt\")\n\n","user":"anonymous","dateUpdated":"2020-02-03T02:07:46+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1580690823151_1346639893","id":"20200202-022520_1313342527","dateCreated":"2020-02-03T00:47:03+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4049","dateFinished":"2020-02-03T01:49:14+0000","dateStarted":"2020-02-03T01:49:07+0000","results":{"code":"SUCCESS","msg":[]}},{"text":"%pyspark\nintRdd.collect()\n","user":"anonymous","dateUpdated":"2020-02-03T02:07:30+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1580694558027_-1108618077","id":"20200203-014918_677922954","dateCreated":"2020-02-03T01:49:18+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:5515","dateFinished":"2020-02-03T02:07:35+0000","dateStarted":"2020-02-03T02:07:30+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[0.4988191632928475]\n"}]}}],"name":"intstream_spark","id":"2F1J27RA6","noteParams":{},"noteForms":{},"angularObjects":{"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}